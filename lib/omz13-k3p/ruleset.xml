<?xml version="1.0"?>
<ruleset name="omz13">
  <description>
    How omz13 likes code to look.
  </description>

  <rule ref="PHPCompatibility">
    <config name="testVersion" value="7.1-"/>
  </rule>

  <!-- tabs -->
  <arg name="tab-width" value="2"/>

  <!-- all generic -->
  <rule ref="Generic">
    <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>
    <exclude name="Generic.Classes.OpeningBraceSameLine.BraceOnNewLine"/>
    <exclude name="Generic.Commenting.Todo.TaskFound"/>
    <exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/>
    <exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/>
    <exclude name="Generic.Commenting.DocComment.MissingShort"/>
    <exclude name="Generic.Files.EndFileNoNewline.Found"/>
    <exclude name="Generic.Files.LineLength"/>
    <exclude name="Generic.Formatting.NoSpaceAfterCast"/>
    <exclude name="Generic.Functions.FunctionCallArgumentSpacing.SpaceBeforeComma"/>
    <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/>
    <exclude name="Generic.PHP.ClosingPHPTag.NotFound"/>
    <exclude name="Generic.PHP.UpperCaseConstant.Found"/>
    <exclude name="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed"/>
  </rule>

  <rule ref="Generic.Arrays.ArrayIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!-- Use Unix newlines -->
  <rule ref="Generic.Files.LineEndings">
    <properties>
      <property name="eolChar" value="\n"/>
    </properties>
  </rule>

  <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
    <properties>
      <property name="checkFunctions" value="true"/>
      <property name="checkClosures" value="true"/>
    </properties>
  </rule>

  <!-- my code is complex... deal with it -->
  <rule ref="Generic.Metrics.CyclomaticComplexity">
    <properties>
      <property name="complexity" value="20"/>
      <property name="absoluteComplexity" value="30"/>
    </properties>
  </rule>

  <rule ref="Generic.Metrics.NestingLevel">
    <properties>
      <property name="nestingLevel" value="8"/>
      <property name="absoluteNestingLevel" value="12"/>
    </properties>
  </rule>

  <!-- Ban some functions -->
  <rule ref="Generic.PHP.ForbiddenFunctions">
    <properties>
      <property name="forbiddenFunctions" type="array">
        <element key="sizeof" value="count"/>
        <element key="delete" value="unset"/>
        <element key="print" value="echo"/>
        <element key="is_null" value="null"/>
        <element key="create_function" value="null"/>
      </property>
    </properties>
  </rule>

  <rule ref="Generic.Strings.UnnecessaryStringConcat">
    <properties>
      <property name="allowMultiline" value="true"/>
    </properties>
  </rule>

  <!-- spaces around parens -->
  <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
      <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
    </properties>
  </rule>

  <!--The complete PSR-2 ruleset-->
  <rule ref="PSR2"/>

  <rule ref="PSR2.Classes.ClassDeclaration">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
    <properties>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <rule ref="PSR2.ControlStructures.SwitchDeclaration">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <rule ref="PSR2.Methods.FunctionCallSignature">
    <properties>
      <property name="indent" value="4"/>
      <property name="allowMultipleArguments" value="false"/>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <!-- let this be handled by SlevomatCodingStandard.Namespaces.NamespaceSpacing -->
  <rule ref="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter">
    <exclude name="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter"/>
  </rule>

  <!-- some of the squiz - adjusted accordingly to work with PSR2 as tweaked above -->

  <!-- Squiz.Operators.ComparisonOperatorUsage.NotAllowed -->
  <!-- Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue -->
  <!-- Squiz.Commenting.InlineComment.NotCapital -->
  <!-- Squiz.Commenting.InlineComment.InvalidEndChar -->

  <!-- Nasty. Need to exclude that which is what we want -->
  <rule ref="Squiz.Arrays.ArrayDeclaration">
    <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
    <!-- <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" /> -->
    <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
  </rule>

  <rule ref="Squiz.Commenting.ClosingDeclarationComment"/>

  <rule ref="Squiz.Commenting.LongConditionClosingComment">
    <properties>
      <property name="lineLimit" value="14"/>
    </properties>
  </rule>

  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine">
    <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
  </rule>

  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration">
    <exclude name="Squiz.ControlStructures.ForEachLoopDeclaration"/>
  </rule>

  <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
    <exclude name="Squiz.ControlStructures.ForLoopDeclaration"/>
  </rule>

  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <!-- Force whitespace before and after concatenation -->
  <rule ref="Squiz.Strings.ConcatenationSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

  <!-- Forbid braces around string in `echo` -->
  <rule ref="Squiz.Strings.EchoedStrings"/>

  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing">
    <properties>
      <property name="requiredSpacesAfterOpen" value="1"/>
      <property name="requiredSpacesBeforeClose" value="1"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.FunctionSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="spacingAfterLast" value="0"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

  <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
    <properties>
      <property name="spacing" value="0"/>
      <property name="spacingBeforeFirst" value="0"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>

  <rule ref="Squiz.WhiteSpace.SemicolonSpacing">
    <properties>
      <property name="spacingBefore" value="1"/>
    </properties>
  </rule>

  <!-- Explicitly re-enable these sniffs because they are disabled by PSR2. See https://github.com/squizlabs/PHP_CodeSniffer/issues/600#issuecomment-104889303-->
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
    <properties>
      <property name="ignoreBlankLines" value="false"/>
    </properties>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
    <severity>5</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
    <severity>5</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
    <severity>5</severity>
  </rule>

  <!-- Method and function arguments with default values MUST go at the end of the argument list. -->
  <rule ref="PEAR.Functions.ValidDefaultValue"/>

  <!-- Some slevomat -->

  <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
  <!-- <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes"> <properties> <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/> <property name="spacesCountAroundEqualsSign" value="0"/> <property name="newlinesCountAfterDeclare"
  value="2"/> </properties> </rule> -->
  <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
  <!-- <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/> -->
  <!-- <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/> -->

  <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
  <!-- <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/> -->
  <!-- <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/> -->
  <!-- <rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators"/> -->
  <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
  <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
  <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
  <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
  <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
  <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>
  <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
  <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
  <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
  <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
  <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
  <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
  <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>
  <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
  <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
  <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
    <properties>
      <property name="linesCountBeforeFirstUse" value="1"/>
      <property name="linesCountBetweenUses" value="0"/>
      <property name="linesCountAfterLastUse" value="1"/>
      <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
    </properties>
  </rule>
  <!-- Forbid dead code -->
  <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
  <!-- <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/> -->
  <rule ref="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses"/>
  <!-- <rule ref="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator"/> -->
  <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
  <!-- <rule ref="SlevomatCodingStandard.ControlStructures.RequireYodaComparison"/> -->
  <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
  <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
  <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
  <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
  <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
    <properties>
      <property name="linesCountBeforeNamespace" value="1"/>
      <property name="linesCountAfterNamespace" value="1"/>
    </properties>
  </rule>
  <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
    <properties>
      <property name="linesCountBeforeFirstUse" value="1"/>
      <property name="linesCountBetweenUseTypes" value="1"/>
      <property name="linesCountAfterLastUse" value="1"/>
    </properties>
  </rule>
  <!-- <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/> -->
  <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
  <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
  <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
  <!-- <rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/> -->
  <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
  <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
    <properties>
      <property name="spacesCountBeforeColon" value="1"/>
    </properties>
  </rule>

  <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
  <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
  <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.UselessDocComment"/>
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingPropertyTypeHint"/>
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification"/>
  </rule>
  <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
  <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameAfterKeyword"/>
  <!-- <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/> -->
  <!-- <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/> -->
  <!-- <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/> -->
  <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
  <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
    <properties>
      <property name="allowFallbackGlobalFunctions" value="false"/>
      <property name="allowFallbackGlobalConstants" value="false"/>
    </properties>
  </rule>
  <!-- <rule ref="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces"/> -->
  <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
  <!-- <rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces"/> -->
  <!-- <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/> -->
  <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations"/>
  <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments"/>
  <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
    <properties>
      <property name="linesCountBeforeFirstContent" value="0"/>
      <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
      <property name="linesCountBetweenDifferentAnnotationsTypes" value="1"/>
      <property name="linesCountAfterLastContent" value="0"/>
    </properties>
  </rule>
  <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
  <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
  <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
  <!-- <rule ref="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/> -->
  <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>

</ruleset>
